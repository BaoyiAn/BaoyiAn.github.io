{"main":{"witai-day-one":{"content":"<h3 id=\"about-wit-ai-https-wit-ai-\">About <a href=\"https://wit.ai/\">Wit.ai</a></h3>\n<p>I need to complete my SWP2016 course work. TA recommend us to use it. That&#39;s why you can see I wrote this.</p>\n<blockquote>\n<p>Wit.ai is a opensource framwork. We can use it to do many things as it shows on its website.</p>\n<p><img src=\"https://lh5.googleusercontent.com/baKbnBRXjxWh-dy63rNtaLdnHuo7TejIfuwUClgH4gDCWpcFB3ysabPpQEjm56GyRjyhUnaUM25jwd_B4h89UuQBbnJvS5HL9aUN0P_cxf8nFhkX9f7QGn-jDUMbCs-6X2ju8ZSIJk2WE-JS\" alt=\"\"></p>\n</blockquote>\n<p>First, you should have an account. I choose to signin using my github account. No reason, just easy. One thing make me crazy is the browser would record your account, and every time you open wit.ai, it will show your own profile directly. I cannot see its original homepage!</p>\n<p>It seems I said too much nonsense. But I am happy is enough. (￣▽￣)&quot;</p>\n<p>Well, let&#39;s talk about the proper business.</p>\n<hr>\n<h2 id=\"part-one-train-the-bot\">Part One: Train the bot</h2>\n<p>NB:&ensp;&ensp;&ensp;<strong>I just follow the QuickStart Guide</strong></p>\n<h3 id=\"-step-1-create-an-app\"><strong>Step 1 :</strong> Create an app</h3>\n<p><img src=\"https://wit.ai/docs/images/quickstart/create-app-b587a039.png\" alt=\"\" title=\"Create view\"></p>\n<ol>\n<li>Type your new app name</li>\n<li><ol>\n<li>Create your new app \nwhooooa!! Congratulations!! you have created your first app.</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"-step-2-create-a-story\"><strong>Step 2 :</strong> Create a story</h3>\n<p>Actually, I cannot understand why foreigners like to name like this. Maybe it&#39;s really a story. (ˉ▽ˉ；)...</p>\n<p><img src=\"https://wit.ai/docs/images/quickstart/first-story-b2ee236a.gif\" alt=\"\"></p>\n<ol>\n<li>Click <code>Create Story</code></li>\n<li><code>User says</code> field\nType : &quot;What is the weather in Rome?&quot;</li>\n<li>[+]<code> Add a new entity</code></li>\n</ol>\n<ul>\n<li>Type &quot;intent&quot;, Value &quot;weather&quot;</li>\n<li>Select &quot;wit/loction&quot; Highlight &quot;Rome&quot; in the sentence</li>\n</ul>\n<ol>\n<li>Click <code>Bot executes</code> , click on <code>func...</code> and type &quot;getForecast&quot;</li>\n<li>Click <code>Updates context keys with...</code> and type &quot;forecast&quot;(remember!!)</li>\n<li>Click <code>Bot sends</code> and type &quot;The weather will be {forecast}&quot;</li>\n</ol>\n<p>In this story, we have taught several things to Wit about weather forecasting. Bot can start forecasting only if it get the two elements keyword &quot;weather&quot; and Location(Rome is just an example).</p>\n<h3 id=\"-step-3-testing-the-story-in-the-chat-window\"><strong><em>Step 3 :</em></strong> Testing the story in the Chat window</h3>\n<p><img src=\"https://wit.ai/docs/images/quickstart/chat-window-a781d6b0.gif\" alt=\"\"></p>\n<ol>\n<li>Click or Enter shift+~</li>\n<li>Type &quot;how is the weather in Paris&quot;</li>\n<li>The expected action getForecast is correctly predicted. Now the Chat window asks which context keys will be produced by this action (since at this stage, the action is not implemented yet). Click on <code>forecast</code>, and then click on the <code>√</code> (check mark).</li>\n<li>OK. Now the Tthe expected message “The weather will be {forecast}” is predicted.</li>\n</ol>\n<hr>\n<h3 id=\"-step-4-improvement-of-bot-adding-a-branch-\"><strong><em>Step 4 :</em></strong> Improvement of bot(Adding a branch)</h3>\n<p>I prefer to call it a kind of exception processing.(●ˇ∀ˇ●)</p>\n<p><img src=\"https://wit.ai/docs/images/quickstart/branch-6110a5d1.gif\" alt=\"\"></p>\n<ol>\n<li>Click on the <code>branch icon</code> next to &quot;forecast&quot; </li>\n<li>Type <code>&quot;missing Location&quot;</code> in the <code>context-key</code> field</li>\n<li>Click <code>Bot says</code> and type &quot;Where?&quot;</li>\n<li>Click <code>User says</code> and type &quot;in Paris&quot;. you can select the entity, but Wit should normally detect the location entity</li>\n<li>Add a bookmark icon next to your <code>getForecast</code> action, and name your bookmark &quot;getForecast&quot;<font color='green'>NB: where is the bookmark means the branch starting from here</font></li>\n<li>Click on <code>jump</code> and select the <code>getForecast</code> bookmark just created above.<font color='green'>NB: Here is means the branch ending by now. And the next is jumping over to the master branch</font>\n\n</li>\n</ol>\n<h3 id=\"-step-5-testing-the-story-which-now-has-a-branch\"><strong><em>Step 5 :</em></strong> Testing the story which now has a branch</h3>\n<p>Method same as above</p>\n<hr>\n<h2 id=\"part-two-implementing-the-logic-of-the-bot\">Part Two : Implementing the  logic of the bot</h2>\n<p>This part is about the server. We can call the http api of Wit. we should write it by ourselves.</p>\n<p>Until now, the forecast is a fake prediction. So we should realize its forecast function on our side.</p>\n<ol>\n<li>In your terminal, clone the <a href=\"https://github.com/wit-ai/node-wit\">Node.js client</a> and install Node dependencies.</li>\n<li>Clone wit-ai<pre><code>$ git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">https</span>://github.com/wit-ai/<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-wit</span>\n$ cd <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-wit</span>\n$ npm install\n</code></pre></li>\n<li>Open <code>examples/quickstart.js</code>\nLook at the <code>actions</code> object:<pre><code><span class=\"hljs-keyword\">const</span> actions = {\nsend(request, response) {\n <span class=\"hljs-keyword\">const</span> {sessionId, context, entities} = request;\n <span class=\"hljs-keyword\">const</span> {text, quickreplies} = response;\n <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>) </span>{\n   <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'sending...'</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(response)); <span class=\"hljs-comment\">// modify</span>\n   <span class=\"hljs-keyword\">return</span> resolve();\n });\n},\ngetForecast({context, entities}) {\n <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>) </span>{\n   <span class=\"hljs-keyword\">var</span> location = firstEntityValue(entities, <span class=\"hljs-string\">'location'</span>)\n   <span class=\"hljs-keyword\">if</span> (location) {\n     context.forecast = <span class=\"hljs-string\">'sunny in '</span> + location; <span class=\"hljs-comment\">// we should call a weather API here</span>\n     <span class=\"hljs-keyword\">delete</span> context.missingLocation;\n   } <span class=\"hljs-keyword\">else</span> {\n     context.missingLocation = <span class=\"hljs-literal\">true</span>;\n     <span class=\"hljs-keyword\">delete</span> context.forecast;\n   }\n   <span class=\"hljs-keyword\">return</span> resolve(context);\n });\n},\n};\n</code></pre></li>\n<li>We have a <code>getForecast</code> function that:</li>\n</ol>\n<ul>\n<li>Receives the current context, and entities (in our case <code>intent</code> and <code>location</code>) as input parameters.</li>\n<li>Returns a promise that will modify context (in our case adding a <code>forecast</code> key to it).</li>\n</ul>\n<ol>\n<li>Let’s run this example. Replace <code><wit-access-token></code> with your Wit <strong><em>Server Access token</em></strong>, found in the Settings tab in the Wit console.<pre><code>$ <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">examples</span>/quickstart.js <span class=\"hljs-tag\">&lt;wit-access-token&gt;</span>\n&gt; how is the weather <span class=\"hljs-keyword\">in</span> Rome?\nsending... {<span class=\"hljs-string\">\"text\"</span>:<span class=\"hljs-string\">\"The weather will be sunny\"</span>}\n&gt;\n</code></pre></li>\n</ol>\n<hr>\n<p>Actually, I try to test the exception many times, but there&#39;s still a problem. </p>\n<p>Good night!</p>\n<p>TBC.\nOULU\n22/10/2016</p>\n","head":{"title":"Wit.ai Day one","date":"22 Oct 2016","categories":"Study","tags":"study Wit.ai chatbot js"}}},"index":{"tagMap":{"study Wit.ai chatbot js":["witai-day-one"]},"sorted":["witai-day-one"]}}